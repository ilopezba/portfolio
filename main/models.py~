# coding: UTF-8

import os.path
from django.db import models
from img_util import *
from PIL import Image as PILImage
from PIL import ImageOps


class Page(models.Model):
    name_en = models.CharField(max_length=100, verbose_name=("Page's name"))
    name_es = models.CharField(max_length=100, verbose_name=("Nombre de página"))
    slug = models.SlugField()
    show_in_menu = models.BooleanField(default=True)

    def __unicode__(self):
        return "%s - %s" % (self.name_en, self.name_es)

    #ensure slug is unique
    def save(self, *args, **kwargs):
        original_slug = self.slug
        counter = 1
        same_slug = Page.objects.filter(slug=self.slug)
        while same_slug.__len__() > 0:
            self.slug = original_slug + '-' + str(counter)
            same_slug = Page.objects.filter(slug=self.slug)
            counter += 1
        super(Page, self).save(*args, **kwargs)


class Section(models.Model):
    page = models.ForeignKey(Page)
    name_en = models.CharField(max_length=100, verbose_name=("Section's name"))
    name_es = models.CharField(max_length=100, verbose_name=("Nombre de sección"))
    slug = models.SlugField()
    IMAGES = 'images'
    CONTENT_CHOICES = (
        (IMAGES, 'Images'),
    )
    content_type = models.CharField(max_length=15, choices=CONTENT_CHOICES, default=IMAGES)

    def __unicode__(self):
        return "%s - %s" % (self.name_en, self.name_es)

    #ensure slug is unique
    def save(self, *args, **kwargs):
        original_slug = self.slug
        counter = 1
        same_slug = Section.objects.filter(slug=self.slug)
        while same_slug.__len__() > 0:
            self.slug = original_slug + '-' + str(counter)
            same_slug = Section.objects.filter(slug=self.slug)
            counter += 1
        super(Section, self).save(*args, **kwargs)


class Image(models.Model):
    section = models.ForeignKey(Section)
    title_en = models.CharField(max_length=200, verbose_name=("Image's title"))
    title_es = models.CharField(max_length=200, verbose_name=("Título de la imagen"))
    slug = models.SlugField()
    description_en = models.CharField(max_length=400, verbose_name=("Image's description"))
    description_es = models.CharField(max_length=400, verbose_name=("Descripción de la imagen"))
    created = models.DateTimeField(auto_now=True, auto_now_add=True)
    width = models.IntegerField()
    height = models.IntegerField()
    show_in_preview = models.BooleanField(default=True)
    sell = models.BooleanField(default=True)

    def __unicode__(self):
        return "%s" % self.title_en

    #ensure slug is unique
    def save(self, *args, **kwargs):
        original_slug = self.slug
        counter = 1
        same_slug = Image.objects.filter(slug=self.slug)
        while same_slug.__len__() > 0:
            self.slug = original_slug + '-' + str(counter)
            same_slug = Image.objects.filter(slug=self.slug)
            counter += 1
        super(Image, self).save(*args, **kwargs)


class ImageVersion(models.Model):
    image = models.ForeignKey(Image)
    title_en = models.CharField(max_length=200, verbose_name=("Version's title"))
    title_es = models.CharField(max_length=200, verbose_name=("Título de la versión"))
    original_image = models.ImageField(upload_to='uploads/images', verbose_name=("Original Image"))
    preview_image = models.ImageField(upload_to='uploads/previews', verbose_name=("Preview"), blank=True,
                                      null=True, editable=False, help_text='Leave blank to use an autogenerated preview')
    thumbnail_image = models.ImageField(upload_to='uploads/thumbnails', verbose_name=("Thumbnail"), blank=True,
                                      null=True, editable=False, help_text='Leave blank to use an autogenerated thumbnail')
    price = models.DecimalField(max_digits=5, decimal_places=2, default=00.00, blank=True, null=True)

    def __unicode__(self):
        return "%s" % self.title_en

    # override save method so that we can resize the uploaded image if needed, generate thumbnail, etc.
    def save(self, update_fields=False, *args, **kwargs):
        super(ImageVersion, self).save(*args, **kwargs)  #save the model so that the original image is stored correctly
        #then we can see its real name (without whitespaces, without conflicts with existing names...)
        # when update_fields is false (we have updated all fields) then check the image and watermark it
        if update_fields == False:
            image_name = os.path.basename(self.original_image.name)
            outfile_watermark = "media/uploads/previews/"+image_name
            outfile_thumb = "media/uploads/thumbnails/"+image_name
            #image_with_watermark = watermark(self.original_image,'watermark.png','over',opacity=0.7)
            image_with_watermark = watermark(self.original_image, 'watermark.png', 'center', opacity=0.7)
            image_with_watermark.save(outfile_watermark,quality=90)
            self.preview_image = 'uploads/previews/'+image_name  #without /media/ before
            size = (200, 200)
            try:
                image_scaled = PILImage.open(outfile_watermark)
                image_scaled.thumbnail(size, PILImage.ANTIALIAS)
                #image_scaled.save(outfile_thumb, "JPEG")
                image_thumb = ImageOps.fit(image_scaled, size, PILImage.ANTIALIAS)
                image_thumb.save(outfile_thumb, "JPEG")
                self.thumbnail_image = 'uploads/thumbnails/'+image_name  #without /media/ before
            except IOError:
                print "cannot create thumbnail for '%s'" % image_with_watermark

        super(ImageVersion, self).save(*args, **kwargs)
        # TODO mover la imagen original a una carpeta protegida si se va a vender!
